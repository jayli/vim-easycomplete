*easycomplete.txt*		Vim-EasyComplete Plugin

			Copyright (c) 2020-2024 @Jayli
	More Info: https://github.com/jayli/vim-easycomplete

EasyComplete                                                     *easycomplete*

===============================================================================

Introduction

Vim-easycomplete is a fast and minimalism style completion plugin for vim/nvim.
The goal is to work everywhere out of the box. It requires pure VimScript. It's
also super simple to configure. Especially, You don’t have to install Node and
a bunch of Node modules unless you’re a js/ts programmer.

Vim-Easycomplete is easy to install and use. It contains these features:

- Buffer Keywords/Directory support
- LSP support
- Easy to install LSP Server with one command
- Written in pure vim script for vim8 and neovim
- Snippet support with ultisnips.
- Brand New UI Design.

==============================================================================

Requirements

Neovim >= 0.7.0 or Vim >= 8.2

===============================================================================

Installation

Easycomplete requires Vim 8.2 and higher version with MacOS/Linux/FreeBSD.
For neovim users, 0.4.4 is required (Of course, latest is recommended).

Configuration

It use Tab to trigger completion suggestions. You can change this setting by >

  let g:easycomplete_tab_trigger="<c-space>"
<
There are four build-in popup menu themes for default styles confliction: `dark`,
`light`,`rider` and `sharp`. (`let g:easycomplete_scheme="sharp"`). This config
can be ignored in most cases.

===============================================================================

Configuration

The plugin is out of box and config nothing. Use `Tab` to trigger the completion
suggestions and select matched items. By default use `Ctrl-]` for definition
jumping, `Ctrl-t` for jumping back (Same as tags jumping).

Example configuration with lua: >

  -- Highlight the symbol when holding the cursor if you need it
  vim.g.easycomplete_cursor_word_hl = 1
  -- Using nerdfont is highly recommended
  vim.g.easycomplete_nerd_font = 1

  -- GoTo code navigation
  vim.keymap.set('n', 'gr', ':EasyCompleteReference<CR>')
  vim.keymap.set('n', 'gd', ':EasyCompleteGotoDefinition<CR>')
  vim.keymap.set('n', 'rn', ':EasyCompleteRename<CR>')
  vim.keymap.set('n', 'gb', ':BackToOriginalBuffer<CR>')
<
Typing `:h easycomplete` for help.

All commands:

| Command                           | Description                                         |
|-----------------------------------|-----------------------------------------------------|
| `:EasyCompleteInstallServer`      | Install LSP server for current fileytpe             |
| `:InstallLspServer`               | Same as `EasyCompleteInstallServer`                 |
| `:EasyCompleteDisable`            | Disable EasyComplete                                |
| `:EasyCompleteEnable`             | Enable EasyComplete                                 |
| `:EasyCompleteGotoDefinition`     | Goto definition position                            |
| `:EasyCompleteReference`          | Find references                                     |
| `:EasyCompleteRename`             | Rename                                              |
| `:EasyCompleteCheck`              | Checking LSP server                                 |
| `:EasyCompletePreviousDiagnostic` | Goto Previous diagnostic                            |
| `:EasyCompleteNextDiagnostic`     | Goto Next diagnostic                                |
| `:EasyCompleteProfileStart`       | Start record diagnostics message                    |
| `:EasyCompleteProfileStop`        | Stop record diagnostics  message                    |
| `:EasyCompleteLint`               | Do diagnostic                                       |
| `:LintEasyComplete`               | Do diagnostic                                       |
| `:BackToOriginalBuffer`           | Return to the position before the reference jump    |
| `:DenoCache`                      | Do Deno Cache for downloading modules               |
| `:CleanLog`                       | close quickfix window                               |

===============================================================================

Configuration

Example configuration with lua:>

  -- Highlight the symbol when holding the cursor if you need it
  vim.g.easycomplete_cursor_word_hl = 1
  -- Using nerdfont is highly recommended
  vim.g.easycomplete_nerd_font = 1

  -- GoTo code navigation
  vim.keymap.set('n', 'gr', ':EasyCompleteReference<CR>')
  vim.keymap.set('n', 'gd', ':EasyCompleteGotoDefinition<CR>')
  vim.keymap.set('n', 'rn', ':EasyCompleteRename<CR>')
  vim.keymap.set('n', 'gb', ':BackToOriginalBuffer<CR>')

<

Example configuration with vim script:>

" Highlight the symbol when holding the cursor
let g:easycomplete_cursor_word_hl = 1
" Using nerdfont is highly recommended
let g:easycomplete_nerd_font = 1

" GoTo code navigation
noremap gr :EasyCompleteReference<CR>
noremap gd :EasyCompleteGotoDefinition<CR>
noremap rn :EasyCompleteRename<CR>
noremap gb :BackToOriginalBuffer<CR>

<

`set updatetime=300` (in lua `vim.opt.updatetime = 300`) is highly recommended.

===============================================================================

Language Support

EasyComplete support keywords/dictionary/directory completion by default.

Most Language require LSP Server. Install missing LSP Server with
`:EasyCompleteInstallServer` for current filetype (recommended). LSP Server
will be installed in `~/.config/vim-easycomplete/servers`. >

  :InstallLspServer
<
Or you can install a lsp server with specified plugin name (not recommended).

Take typescript/javascript for example: >

  :InstallLspServer ts
<
All supported languages:

| Plugin Name | Languages             | Language Server        | Installer |
| ----------- | --------------------- | ---------------------- | --------- |
| directory   | directory suggestion  | No Need                | No Need   |
| buf         | keywords & dictionary | No Need                | No Need   |
| snips       | Snippets Support      | ultisnips/vim-snippets | No        |
| ts          | JavaScript/TypeScript | tsserver               | Yes       |
| deno        | JavaScript/TypeScript | deno                   | Yes       |
| tn          | TabNine               | TabNine                | Yes       |
| vim         | Vim                   | vim-language-server    | Yes       |
| cpp         | C/C++                 | ccls                   | Yes       |
| css         | CSS                   | css-languageserver     | Yes       |
| html        | HTML                  | html-languageserver    | Yes       |
| yml         | YAML                  | yaml-language-server   | Yes       |
| xml         | Xml                   | lemminx                | Yes       |
| sh          | Bash                  | bash-language-server   | Yes       |
| json        | JSON                  | json-languageserver    | Yes       |
| py          | Python                | pyls                   | Yes       |
| java        | Java                  | eclipse-jdt-ls         | Yes       |
| go          | Go                    | gopls                  | Yes       |
| rb          | Ruby                  | solargraph             | Yes       |
| lua         | Lua                   | emmylua-ls             | Yes       |
| nim         | Nim                   | nimlsp                 | Yes       |
| rust        | Rust                  | rust-analyzer          | Yes       |
| kt          | Kotlin                | kotlin-language-server | Yes       |
| grvy        | Groovy                | groovy-language-server | Yes       |
| cmake       | cmake                 | cmake-language-server  | Yes       |
| dart        | dart                  | analysis...-snapshot   | Yes       |
| php         | php                   | intelephense           | Yes       |
| cs          | C#                    | omnisharp-lsp          | Yes       |

EasyComplete needs ultisnips for snippets support if you want.
This plugin is compatible with Vim-EasyComplete out of the box. Install with
vim-plug: >

  Plug 'SirVer/ultisnips'
<

Install TabNine language server: `InstallLspServer tabnine` or `InstallLspServer tn`

Set `let g:easycomplete_tabnine_enable = 0` to disable TabNine. Config TabNine via
`g:easycomplete_tabnine_config`, For example: >

  let g:easycomplete_tabnine_config = {
      \ 'line_limit': 1000,
      \ 'max_num_result' : 3
      \ }
<

- |line_limit|: The number of lines before and after the cursor to send to TabNine.
  If the option is smaller, the performance may be improved. (default: 1000)
- |max_num_result|: Max results from TabNine. (default: 10)

By default, an API key is not required to use TabNine in vim-easycomplete. If you
have a Tabnine's Pro API key or purchased a subscription license. To configure, you'll
need to use the TabNine' magic string (https://www.tabnine.com/faq#special_commands).
Type `Tabnine::config` in insert mode to open the configuration panel.

===============================================================================

	Get More Info: https://github.com/jayli/vim-easycomplete

Help

[WIP] If you have bug reports or feature suggestions, please use the issue tracker

  https://github.com/jayli/vim-easycomplete/issues/new

-EOF-
